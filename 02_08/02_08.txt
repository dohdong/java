static멤버 는 객체를 만들지 않고 바로 
클래스이름.멤버이름 같은 식으로 바로바로 가져다 쓸 수 있음.
ex) 238p

static 에서는 this. 을 쓸수없음
인스턴스 필드(멤버) , ( non static ) 는 객체를 만들어야 쓸 수 있는데, static은 객체를 만들 수 없음. -? 뭐지 

static 메소드에서 인스턴스멤버를 사용하려면 객체 생성후 참조변수로 접근해야함.
객체를 만들지 않고 그냥 this 로 쓰는게 안되는거지 아예 못쓰는건 아님. 

처음에 말한(클래스이름.멤버이름) 거랑 객체 만들어서 쓰는거랑 뭐지 무슨 관계인거지? 


final
값을 변경할 수 없는 필드
얘는 선언할때 주거나, 생성자에서 주거나.
생성자 ex) public Peson(String ssn, String name) { this.ssn = ssn; } 같은방식


접근 제한자 ( Access Modifier ) 
default = 패키지 level 임.
클래스에 적용할 수 있는 접근제한은 public, default -> 2가지 . (public 을 쓰거나 안쓰거나) -? 다른건?
public을 쓰지 않으면 default 로 패키지 level 이므로 그 패키지 안에 다른 곳에서 쓸 수 있음.
public을 쓰면 다른 패키지 상관없이 가져다 쓸 수 있음.

private 는 클래스만 벗어나도 다른곳에서 쓸수없음.
아무것도 안쓰면 default 로 같은 패키지 내에서는 잘 쓸 수 있음.

Class의 필드들은 private으로 하는게 바람직하고, 
그 밑에 void deposit(int amount) { ... }  같은 건 default 즉 안쓰는게 바람직함. 
아무튼 private으로 써서, 그 밑에 void ~ 를 활용해서 변경하는게 바람직함.

getter , setter
외부에서 변환하려고 필요하다...
외부에서 마음대로 변환하지 못하도록 필드를private으로 정의해주었을때  getter, setter 가 필요하다


-객체 배열
그전에 기초형배열은 배열에 변수이름에 가보면 실제 값이 있음.
객체 배열은 변수이름에 가면 다시 주소가 또 들어있음. 그 ref 를 찾아가면 값이 있음.

//필드
//생성자( 객체를 초기화 해주려고 씀.) ( 생성자 오버로딩은 어떤 생성자가 필요할지몰라서 다양한녀석을 준비)

객체배열 .. 예를 들어 어제 bankAccount를 만들었는데, 실제로는 한사람이 여러 계좌를 가지고있을수도있음
따라서 이럴때 당연하게도 객체배열이 필요함.
dArray 내용.


동적 객체배열

ArrayList는 객체 데이터로만 구성됨




---------------------------------------------------------------------------
상속

메소드 재정의 (@Override) 
부모 클래스의 메소드를 수정해서 자식클래스에서 재정의 하여 사용하기 위해 씀.

상속이 전제되어야 다형성이 말이 됨. eInherit 를 통해 보면 
앞에서 다 상속이 되었기 때문에 Method 에서 보면 
static void paint(Shape p) {
		p.draw(); }
로 Shape p 로 받을수 있다.


calc 추상클래스 그 안에는
setvalue 



인터페이스의 장점
- 상속은 단일상속만 가능한데
여러개를 상속받고 싶을때 인터페이스를 활용한다.
하나는 클래스로 상속받고, 하나는 인터페이스로 받으면 된다..? 
인터페이스는 다중구현이 된다.

근데 추상보다 인터페이스를 훨씬 많이씀..


인터페이스... 뭐지? 

지하철에 환승기능이있다.
transfer 인터페이스를 만들어서 버스환승시 +얼마, 지하철시 +얼마, 
인터페이스도 똑같은 .java 파일이므로 인터페이스를 상속받을수도있고, 다중상속도 됨.

오 다형성... 뭔가 알것같기도하고...



오늘 반드시 상속, 인터페이스 텍스트를 읽어봐라.



인터페이스는 351페이지에 있는것. 이나 그 앞?

리모컨 기능을 가지고 있는 audio , tv 같은 것을 만드는 방법. 실습을 꼭 해보아라.
.
